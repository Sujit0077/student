Solidity is object-oriented, high-level statically-typed programing language used to create 
smart contracts. Solidity programming looks similar to Java script, but there are a lot of 
differences between both languages. In solidity, you need to compile the program first, while 
in Java script, you can run the program directly in your browser or by using Node JS. With 
solidity, you can create contracts for uses such as voting, crowd funding, blind auctions, and 
multi-signature wallets. It is also a case-sensitive programming language.









1. Structures (struct)
Structures in Solidity are custom data types that allow you to group different variables under a single type.
// Define a structure for Student data
struct Student {
    uint id;
    string name;
    uint age;
    uint[] scores; // Dynamic array to hold scores
}

// Using the structure in a contract
contract School {
    Student[] public students; // Array of Student structs

    // Add a student
    function addStudent(uint _id, string memory _name, uint _age) public {
        // Create a new Student and push it to the students array
        students.push(Student(_id, _name, _age, new uint    }
}



2. Arrays
Arrays in Solidity can be either fixed-size or dynamic. They can store data of any type, such as uint, string, or custom struct types.

Types of Arrays:

Fixed-size: Size defined at declaration.
Dynamic-size: Grows as elements are added.
contract ArrayExample {
    // Dynamic array of unsigned integers
    uint[] public numbers;
    
    // Fixed-size array of strings
    string[3] public fixedArray = ["Alice", "Bob", "Charlie"];
    
    // Function to add a number to the dynamic array
    function addNumber(uint num) public {
        numbers.push(num);
    }
    
    // Get array length
    function getNumbersCount() public view returns (uint) {
        return numbers.length;
    }
}
3. Loops (for and while)
Loops are used to iterate over arrays or perform repetitive actions. Solidity supports for, while, and do-while loops, but use loops cautiously because they consume gas for each iteration, which can be expensive on-chain.


contract LoopExample {
    uint[] public numbers;

    // Add multiple numbers using a loop
    function addNumbers(uint count) public {
        for (uint i = 0; i < count; i++) {
            numbers.push(i);
        }
    }
    
    // Sum all elements in the array
    function sumArray() public view returns (uint) {
        uint sum = 0;
        for (uint i = 0; i < numbers.length; i++) {
            sum += numbers[i];
        }
        return sum;
    }
}
4. If-Else Statements
Solidity supports if, else if, and else conditional statements, similar to other programming languages.
contract IfElseExample {
    // Function to check if a number is even or odd
    function isEven(uint num) public pure returns (string memory) {
        if (num % 2 == 0) {
            return "Even";
        } else {
            return "Odd";
        }
    }

    // Function to categorize a number
    function categorizeNumber(int num) public pure returns (string memory) {
        if (num > 0) {
            return "Positive";
        } else if (num < 0) {
            return "Negative";
        } else {
            return "Zero";
        }
    }
}
